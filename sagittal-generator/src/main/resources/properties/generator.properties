jdbc.driverLocation=E:\\apache-maven-3.6.3\\respository\\mysql\\mysql-connector-java\\5.1.47\\mysql-connector-java-5.1.47.jar
# 该驱动会导致 XXByPrimaryKey 生成失败
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.connectionURL=jdbc:mysql://localhost:3306/testdb
# jdbc.connectionURL=jdbc:mysql://localhost:3306/world?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&tinyInt1isBit=false
jdbc.userId=root
jdbc.password=000000

# defaultModelType
# 1，conditional：类似hierarchical；
# 2，flat：所有内容（主键，blob）等全部生成在一个对象中； default
# 3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
context.defaultModelType=flat
# targetRuntime:
# 1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
# 2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
context.targetRuntime=MyBatis3

# 相关表的配置
table.name=book
table.domainObjectName=Book

java.model.generator.targetPackage=com.sagittal.pojo
java.client.generator.targetPackage=com.sagittal.dao
sql.map.generator.targetPackage=mapper

table.enableInsert=true
table.enableDeleteByPrimaryKey=true
table.enableUpdateByPrimaryKey=true
table.enableSelectByPrimaryKey=true

table.enableDeleteByExample=true
table.enableUpdateByExample=true
table.enableSelectByExample=true
table.enableCountByExample=true
# column:主键的列名
table.generatedKey.column=id
# sqlStatement：要生成的selectKey语句，有以下可选项：
# Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
# DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
# DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
# Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
# HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
# Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
# MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
# SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
# SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
# JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
table.generatedKey.sqlStatement=JDBC


# 实体类生成的位置
# Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
# targetPackage     指定生成的model生成所在的包名
# targetProject     指定在该项目下所在的路径
java.model.generator.targetProject=src/main/java

# *Mapper.xml 文件的位置
# Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件
sql.map.generator.targetProject=src/main/resources

# Mapper 接口文件的位置
# 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
# type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
# type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
# type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
java.client.generator.targetProject=src/main/java
java.client.generator.type=XMLMAPPER